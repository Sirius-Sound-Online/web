generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id               String   @id @default(cuid())
  name             String?
  email            String?  @unique
  emailVerified    DateTime?
  image            String?
  role             String   @default("member")
  waitlistPosition Int?
  queueNumber      Int?
  accounts         Account[]
  sessions         Session[]
  waitlistEntries  WaitlistEntry[]
  orders           Order[]
  queueEntries     QueueEntry[]
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  user               User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model WaitlistEntry {
  id                String   @id @default(cuid())
  email             String
  role              String
  consent           Boolean
  status            String   @default("pending")
  confirmationToken String   @unique
  user              User?    @relation(fields: [userId], references: [id])
  userId            String?
  referralCode      String?
  createdAt         DateTime @default(now())
}

model Order {
  id              String   @id @default(cuid())
  type            String
  stripeSessionId String   @unique
  stripeIntentId  String?
  amount          Int
  currency        String   @default("usd")
  status          String   @default("authorized")
  user            User?    @relation(fields: [userId], references: [id])
  userId          String?
  metadata        String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model PickupSample {
  id           String          @id @default(cuid())
  name         String          // e.g. "Sirius Prototype A"
  guitar       String          // e.g. "Fender Stratocaster"
  position     String          // e.g. "Neck"
  description  String?         // Technical details
  audioFile    String          // Path to audio file
  order        Int             // Display order in test
  active       Boolean         @default(true)
  isSirius     Boolean         @default(false) // True for Sirius pickups
  ratings      ToneLabRating[]
  createdAt    DateTime        @default(now())
}

model ToneLabTest {
  id            String          @id @default(cuid())
  sessionId     String          @unique @default(cuid()) // Anonymous session ID
  userId        String?         // Optional if user is logged in
  ratings       ToneLabRating[]
  completed     Boolean         @default(false)
  completedAt   DateTime?
  createdAt     DateTime        @default(now())
}

model ToneLabRating {
  id              String        @id @default(cuid())
  testId          String
  test            ToneLabTest   @relation(fields: [testId], references: [id], onDelete: Cascade)
  sampleId        String
  sample          PickupSample  @relation(fields: [sampleId], references: [id], onDelete: Cascade)
  rating          Int           // 1-10
  guessedName     String?       // What user thought it was
  playCount       Int           @default(0)
  createdAt       DateTime      @default(now())

  @@unique([testId, sampleId])
}

model QueueEntry {
  id                String    @id @default(cuid())
  queueNumber       Int       @unique
  userId            String?
  user              User?     @relation(fields: [userId], references: [id])
  email             String
  stripeSessionId   String?   @unique
  stripeIntentId    String?
  status            String    @default("pending_payment") // pending_payment, paid, active, contacted, confirmed, shipped, cancelled
  depositAmount     Int       @default(10000) // $100 in cents
  remainingAmount   Int       @default(45000) // $450 in cents
  telegramUsername  String?
  telegramInviteSent Boolean  @default(false)
  pickupConfig      String?   // JSON configuration
  notes             String?   // Admin notes
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  contactedAt       DateTime?
  confirmedAt       DateTime?
  shippedAt         DateTime?
}
